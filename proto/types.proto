syntax = "proto3";

package types;

/**************
 *** Proofs ***
 **************/

 message RequestProofRequest {
   // The signature of the sender.
   bytes signature = 1;
   // The body of the request.
   RequestProofRequestBody body = 2;
 }

 message RequestProofRequestBody {
   // The account nonce of the sender.
   uint64 nonce = 1;
   // The verification key hash of the program.
   bytes vk_hash = 2;
   // The version of the prover to use.
   string version = 3;
   // The mode for the request.
   ProofMode mode = 4;
   // The stdin resource identifier.
   string stdin_uri = 5;
   // The deadline for the request.
   uint64 deadline = 6;
   // The cycle limit for the request.
   uint64 cycle_limit = 7;
   // The gas limit for the request. If 0, the cycle_limit is used.
   uint64 gas_limit = 8;
 }

message RequestProofResponse {
  // The transaction hash.
  bytes tx_hash = 1;
  // The body of the response.
  RequestProofResponseBody body = 2;
}

message RequestProofResponseBody {
  // The identifier for the request.
  bytes request_id = 1;
}

message GetProofRequestStatusRequest {
  // The identifier for the request.
  bytes request_id = 1;
}

message GetProofRequestStatusResponse {
  // The fulfillment status of the request.
  FulfillmentStatus fulfillment_status = 1;
  // The execution status of the request.
  ExecutionStatus execution_status = 2;
  // The transaction hash of the request.
  bytes request_tx_hash = 3;
  // The deadline of the request. A request should be ignored if it is past
  // its deadline.
  uint64 deadline = 4;
  // The optional transaction hash of the proof fulfill. Only included if the
  // request has a fulfillment status of FULFILLED.
  optional bytes fulfill_tx_hash = 5;
  // The optional proof URI, where you can download the result of the request.
  // Only included if the request has a fulfillment status of FULFILLED.
  optional string proof_presigned_url = 6;
}

/****************
 *** Programs ***
 ***************/

message ProgramExistsRequest {
  // The verification key hash of the program.
  bytes vk_hash = 1;
}

message ProgramExistsResponse {
  // The program existance.
  bool exists = 1;
}

message CreateProgramRequest {
  // The signature of the sender.
  bytes signature = 1;
  // The body of the request.
  CreateProgramRequestBody body = 2;
}

message CreateProgramRequestBody {
  // The account nonce of the sender.
  uint64 nonce = 1;
  // The verification key hash.
  bytes vk_hash = 2;
  // The program resource identifier.
  string program_uri = 3;
}

message CreateProgramResponse {}

/*************
 *** Enums ***
 *************/

enum ProofMode {
  UNSPECIFIED_PROOF_MODE = 0;
  // The core proof mode.
  CORE = 1;
  // The compressed proof mode.
  COMPRESSED = 2;
  // The plonk proof mode.
  PLONK = 3;
  // The groth16 proof mode.
  GROTH16 = 4;
}

// The different fulfillment statuses that a request can be in.
enum FulfillmentStatus {
  UNSPECIFIED_FULFILLMENT_STATUS = 0;
  // The request has been requested.
  REQUESTED = 1;
  // The request has been assigned to a fulfiller.
  ASSIGNED = 2;
  // The request has been fulfilled.
  FULFILLED = 3;
  // The request cannot be fulfilled.
  UNFULFILLABLE = 4;
}

// The different execution statuses that a request can be in.
enum ExecutionStatus {
  UNSPECIFIED_EXECUTION_STATUS = 0;
  // The request has not been executed.
  UNEXECUTED = 1;
  // The request has been executed.
  EXECUTED = 2;
  // The request cannot be executed.
  UNEXECUTABLE = 3;
  // The request was executed, but validation failed.
  VALIDATION_FAILED = 4;
}
